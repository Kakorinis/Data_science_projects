# -*- coding: utf-8 -*-
"""run_server_docker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o6Dkjqq3d2h7fcwl76EdNc7MPZUpLW8V
"""

import dill
import pandas as pd
import os
dill._dill._reverse_typemap['ClassType'] = type
#import cloudpickle
import flask
import logging
from logging.handlers import RotatingFileHandler
from time import strftime

# initialize our Flask application and the model
app = flask.Flask(__name__)
model = None
stop_words, clean_text, remove_stopwords,lemmatization_morph = None, None, None, None

handler = RotatingFileHandler(filename='app.log', maxBytes=100000, backupCount=10)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(handler)

def load_model(model_path):
  global model
  with open(model_path, 'rb') as f:
    model = dill.load(f)
	#print(model)

modelpath = "/app/app/models/application_log_dict.dill"
load_model(modelpath)


def load_packet(packet_path):
  global stop_words
  global clean_text
  global remove_stopwords
  global lemmatization_morph
  with open(packet_path, 'rb') as f1:
    stop_words, clean_text, remove_stopwords,lemmatization_morph = dill.load(f1)

packetpath = "/app/app/models/packet_files.dill" #/home/kakorinis/Desktop/GB/GeekBrains/II четверть/Машинное обучение бизнес/Курсовая/через докер (ошибка с портом 8180)/app/app/packet_files.dill
load_packet(packetpath)


@app.route("/", methods=["GET"])
def general():
    return "Welcome to prediction process"

@app.route('/predict', methods=['POST'])
def predict():
    data = {"success": False}
    dt = strftime("[%Y-%b-%d %H:%M:%S]")

    if flask.request.method == "POST":
      user_id, user_text = "", ""
      request_json = request.get_json()
      
      if request_json["id"]:
        user_id = request_json['id']
        
      if request_json["text"]:
        user_text = request_json['text']

      try:
        # не забываем что model это словарь с самой моделью и ее версией
        preds = model['model'].predict_proba(pd.DataFrame({"id": [user_id],
                                                "text": [user_text]}))
      except AttributeError as e:
        logger.warning(f'{dt} Exception: {str(e)}')
        data['predictions'] = str(e)
        data['success'] = False
        return flask.jsonify(data)
   

    data["predictions"] = preds[:, 1][0]
    data["text"] = user_text
    data["success"] = True
   # print('OK')

        # return the data dictionary as a JSON response
    return flask.jsonify(data)

if __name__ == "__main__":
	print(("* Loading the model and Flask starting server..."
		"please wait until server has fully started"))
	port = int(os.environ.get('PORT', 8180)) # было 8180
	app.run(host='0.0.0.0', debug=True, port=port) # было port=port и host='127.0.0.1'
